name: Infrastructure Management

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
  push:
    branches: [ main ]
    paths: 
      - 'terraform/**'
      - '.github/workflows/infrastructure.yml'

env:
  TF_VERSION: '1.5.0'
  ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
  ARM_CLIENT_SECRET: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
  ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
  ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}

jobs:
  terraform:
    runs-on: ubuntu-latest
    name: Terraform ${{ github.event.inputs.action || 'plan' }}
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    outputs:
      registry_login_server: ${{ steps.tf_output.outputs.registry_login_server }}
      cluster_name: ${{ steps.tf_output.outputs.cluster_name }}
      resource_group: ${{ steps.tf_output.outputs.resource_group }}
      ingress_ip: ${{ steps.tf_output.outputs.ingress_ip }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false

    - name: Terraform Init
      working-directory: terraform
      run: terraform init

    - name: Terraform Validate
      working-directory: terraform
      run: terraform validate

    - name: Terraform Plan
      id: plan
      working-directory: terraform
      run: |
        terraform plan \
          -var="environment=${{ github.event.inputs.environment || 'dev' }}" \
          -var="resource_group_name=sre-challenge-${{ github.event.inputs.environment || 'dev' }}-rg" \
          -var="cluster_name=sre-challenge-${{ github.event.inputs.environment || 'dev' }}-aks" \
          -var="container_registry_name=srechallenge${{ github.event.inputs.environment || 'dev' }}acr" \
          -out=tfplan

    - name: Terraform Apply
      if: github.event.inputs.action == 'apply' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
      working-directory: terraform
      run: terraform apply tfplan

    - name: Terraform Destroy
      if: github.event.inputs.action == 'destroy'
      working-directory: terraform
      run: |
        terraform destroy \
          -var="environment=${{ github.event.inputs.environment }}" \
          -var="resource_group_name=sre-challenge-${{ github.event.inputs.environment }}-rg" \
          -var="cluster_name=sre-challenge-${{ github.event.inputs.environment }}-aks" \
          -var="container_registry_name=srechallenge${{ github.event.inputs.environment }}acr" \
          -auto-approve

    - name: Get Terraform Outputs
      id: tf_output
      if: github.event.inputs.action == 'apply'
      working-directory: terraform
      run: |
        echo "registry_login_server=$(terraform output -raw container_registry_login_server)" >> $GITHUB_OUTPUT
        echo "cluster_name=$(terraform output -raw aks_cluster_name)" >> $GITHUB_OUTPUT
        echo "resource_group=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT
        echo "ingress_ip=$(terraform output -raw nginx_ingress_ip)" >> $GITHUB_OUTPUT

  verify-infrastructure:
    runs-on: ubuntu-latest
    needs: terraform
    if: github.event.inputs.action != 'destroy' && needs.terraform.outputs.cluster_name != ''
    name: Verify Infrastructure
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Get AKS credentials
      run: |
        az aks get-credentials \
          --resource-group ${{ needs.terraform.outputs.resource_group }} \
          --name ${{ needs.terraform.outputs.cluster_name }}
    
    - name: Verify cluster
      run: |
        kubectl cluster-info
        kubectl get nodes
        kubectl get namespaces
        
    - name: Check NGINX Ingress
      run: |
        kubectl get svc -n ingress-nginx
        echo "Ingress IP: ${{ needs.terraform.outputs.ingress_ip }}"
